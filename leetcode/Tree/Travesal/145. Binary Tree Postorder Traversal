# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        def postorder(root:TreeNode):
            if not root:
                return
            postorder(root.left)
            postorder(root.right)
            res.append(root.val)            
        res=list()
        postorder(root)
        return res
        # output = list()
        # if root is None:
        #     return output
        # left = self.postorderTraversal(root.left)
        # right = self.postorderTraversal(root.right)
        # if left:
        #     output+=left
        # if right:
        #     output+=right
        # if root.val:
        #     output.append(root.val)        
        # return output
 
 Time: O(n)
 Space: O(n) worst, average O(logN)
 recursion
 
 
 
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            return list()
        
        stack = list()
        res = list()
        prev = None
        while root or stack:
            while root:
                stack.append(root)
                root = root.left
            root=stack.pop()
            if root.right and prev != root.right:
                stack.append(root)
                root=root.right
            else:
                res.append(root.val)
                prev = root
                root = None
        return res
        
 Follow up: https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution/    
