# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        def check(p,q):
            if not p and not q:
                return True
            if not p or not q:
                return False            
            if p.val == q.val:
                return check(p.left,q.right) and check(p.right,q.left)
            else:
                return False
            
        return check(root,root) //return check(root.left,root.right)
        
 
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSymmetric(self, root: TreeNode) -> bool:
        queue = list()
        queue.append(root.left)
        queue.append(root.right)
        while queue:
            left=queue.pop()
            right=queue.pop()
            if not left and not right:
                continue
            if not left or not right:
                return False
            if left.val != right.val:
                return False
            queue.append(left.left)
            queue.append(right.right)
            queue.append(left.right)
            queue.append(right.left)            
        return True
        
  use queue to do two pointer, put in left and right and get out two together to compare      
